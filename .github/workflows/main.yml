name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ${{ github.repository }}/backend
  IMAGE_FRONTEND: ${{ github.repository }}/frontend

jobs:
  backend-tests:
    name: Backend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          if [ -f test_main.py ]; then python -m pytest -q; else echo "No tests"; fi

  frontend-build:
    name: Frontend build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: |
          if [ -f eslint.config.js ]; then npm run lint --if-present; else echo "No lint"; fi

      - name: Build
        run: npm run build --if-present

  docker-build:
    name: Docker build images
    needs: [backend-tests, frontend-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tags
        id: meta
        run: |
          SHA_TAG=${GITHUB_SHA::7}
          echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then echo "latest_tag=latest" >> $GITHUB_OUTPUT; fi

      - name: Compute lowercase image names
        id: image
        run: |
          REPO_LC=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          echo "backend=${REPO_LC}/backend" >> $GITHUB_OUTPUT
          echo "frontend=${REPO_LC}/frontend" >> $GITHUB_OUTPUT

      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image.outputs.backend }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.REGISTRY }}/${{ steps.image.outputs.backend }}:${{ steps.meta.outputs.latest_tag }}

      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: |
            ${{ env.REGISTRY }}/${{ steps.image.outputs.frontend }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.REGISTRY }}/${{ steps.image.outputs.frontend }}:${{ steps.meta.outputs.latest_tag }}


